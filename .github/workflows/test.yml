name: test image

on:
  push:
  pull_request:
  workflow_dispatch:


jobs:
  buildx:
    runs-on: ubuntu-latest
    timeout-minutes: 240
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            jemand771/latex-build
            ghcr.io/jemand771/latex-build
          flavor: |
            latest=true
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
      - name: Set up docker cache
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: test-buildx-${{ runner.os }}-${{ hashFiles('Dockerfile', 'compile.sh') }}
          restore-keys: |
            test-buildx-${{ runner.os }}-
            test-buildx-
      - name: Build image
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        # TODO remove me. prevent the cache from growing infinitely
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
  test:
    runs-on: ubuntu-latest
    needs: buildx
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        # TODO we don't use flake8 yet
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Run tests
        run: python -m unittest
